Absolutely. Here's a detailed and practical guide with recommended thresholds, alert conditions, and how to monitor key parameters for Tomcat, WebSphere Liberty, and even WebSphere traditional (WAS) ‚Äî especially around heap, GC, thread pools, CPU, memory, and ports.


---

‚úÖ 1. Heap Usage Monitoring

üîç How to Monitor

Via JMX (JConsole, VisualVM, Prometheus JMX Exporter)

Log GC logs: -Xloggc:<path> and analyze with GCViewer or tools like GCeasy

APM tools: AppDynamics, Dynatrace, Datadog auto-collect JVM metrics

Liberty: Also exposes /metrics endpoint (with mpMetrics-1.1 feature)


‚úÖ Recommended Thresholds

Metric	Threshold / Alert Value

Heap Usage	Alert if > 75% used for 5+ mins
Old Gen / Tenured Usage	Alert if > 80% (possible memory leak)
Full GC Frequency	> 3 full GCs in 5 minutes ‚Üí alert
GC Pause Time (Full GC)	> 200 ms ‚Üí warning, > 1s ‚Üí critical
Object Promotion Rate	Sudden increase = investigate leak


üîî Alert Examples

ALERT: JVM heap usage 88% for 7 mins - server1

WARNING: Full GC occurred 5 times in last 10 minutes



---

‚úÖ 2. Thread Usage Monitoring

üîç How to Monitor

JMX Metrics: ThreadPool MBeans

Tomcat: Catalina:type=ThreadPool,name="http-nio-8080"

Liberty: WebContainer and custom thread pool MBeans


Thread Dumps: take using jstack <pid>, kill -3, or Admin UI

Synthetic load test can help understand thresholds


‚úÖ Recommended Thresholds

Thread Pool Type	Metric	Alert Condition

HTTP Thread Pool	Active Threads vs Max	> 80% active ‚Üí warning; > 90% ‚Üí alert
Default Executor	Queue Size	> 50 pending ‚Üí investigate
Hung Threads	Threads blocked > 60s	Alert on any occurrence
Total JVM Threads	> 400 (depending on app size)	Alert if steadily increasing


üîî Alert Examples

ALERT: WebContainer pool 48/50 threads in use

WARNING: 3 hung threads detected for > 90 seconds



---

‚úÖ 3. CPU Usage by JVM

üîç How to Monitor

top, pidstat, jstat, or APM

JMX via OperatingSystem MBean


‚úÖ Recommended Thresholds

Metric	Threshold

CPU % Usage	> 85% JVM process for 5+ mins
Load Average	> Number of cores
System CPU %	> 90% overall ‚Üí investigate


üîî Alert Examples

ALERT: JVM CPU at 92% for 8 mins (server1)

WARNING: Load average 5.6 on 4-core machine



---

‚úÖ 4. Memory (System Level)

üîç How to Monitor

top, vmstat, Prometheus Node Exporter, or APM

Memory RSS per JVM process


‚úÖ Recommended Thresholds

Metric	Threshold

Memory Used	> 90% RAM ‚Üí alert
Swap Used	> 0 ‚Üí investigate JVM sizing
JVM RSS	> 80% of physical RAM



---

‚úÖ 5. Port Availability & Process Health

üîç How to Monitor

Use netstat, lsof, or ss

Monitor port status using Nagios, Zabbix, or custom bash/Python script:

nc -z localhost 8080 || echo "Port 8080 down"


‚úÖ Alerts

CRITICAL: Tomcat port 8080 not listening

WARNING: JVM process PID 12345 not running



---

‚úÖ 6. Datasource / JDBC Connection Pool Monitoring

üîç How to Monitor

Tomcat: JMX (type=DataSource)

Liberty: JMX or metrics via /metrics

WebSphere: Admin console or wsadmin/JMX


‚úÖ Recommended Thresholds

Metric	Threshold

Active Connections	> 80% of max pool size
Wait Time	> 1s average ‚Üí warning
Connection Timeout Errors	Any occurrence ‚Üí alert
Leak Suspected	Alert if idle time exceeds threshold



---

‚úÖ 7. Web Requests and Sessions

üîç How to Monitor

Enable access logs

Liberty: Use mpMetrics, server.xml metrics

JMX: Track servlet and session metrics


‚úÖ Thresholds

Metric	Threshold

4xx/5xx HTTP Errors	> 5% of total requests
Avg Response Time	> 500ms sustained
Session Count	Alert if abnormal surge



---

‚úÖ Sample Monitoring Alert Policy (Summary)

Category	Metric	Warning	Critical

JVM Heap	> 75%	> 85%	
Old Gen Heap	> 70%	> 80%	
Full GC Pause	> 200ms	> 1s	
CPU (JVM)	> 75%	> 90%	
Thread Pool Use	> 80%	> 90%	
JDBC Pool	> 70%	> 85%	
HTTP Errors	2‚Äì5%	> 5%	
Port/Process	Not listening / down	Immediate alert	Immediate



---

‚úÖ Tools to Implement These Monitors

Tool	Suitable For

Prometheus + Grafana	JVM, threads, heap, CPU, custom alerts
Datadog / Dynatrace	Full-stack APM with alerting
Nagios / Zabbix	Process, port, system metrics
JMX Exporter	JMX to Prometheus bridge
AppDynamics	Application metrics, DB, thread, heap
ELK / Splunk	Logs + alerts from catalina.out/messages
Shell / Python Scripts	Lightweight port/process/thread checks



---

üîö Summary

You're now equipped with:

Precise thresholds for alerts

Monitoring methods for heap, threads, CPU, memory, and app status

Tools to implement full-stack monitoring for Tomcat and WebSphere Liberty



---

If you'd like:

A Prometheus + JMX Exporter setup guide

Sample alerts in YAML (Prometheus Alertmanager)

Shell scripts or Python samples to automate health checks


Let me know, I can send you any of those.

